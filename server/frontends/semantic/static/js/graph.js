// Generated by CoffeeScript 1.10.0
var Settings, error_graph, init_graph;

Settings = {
  active_menu_class: "context-menu--active",
  context_menu: {
    ".element": "#context-menu",
    "svg": "#context-menu2"
  },
  ui: {
    actions: {
      "Add": metabook.ui.add,
      "Edit": metabook.ui.edit,
      "Delete": metabook.ui["delete"]
    }
  },
  id: {
    messages: "#messages",
    coords: "#coords",
    graph_container: "#paper_holder",
    paper: "#myholder",
    svg: "#v-2"
  }
};

$(document).ready(function() {
  var WebSocketTest, counter, data_uri, makeCounter, messageContainer;
  WebSocketTest = void 0;
  messageContainer = $(Settings.id.messages);
  WebSocketTest = function(ev) {
    var ws;
    messageContainer.text("WebSocket is supported by your Browser!");
    ws = new WebSocket("ws://" + window.location.host + "/api/sessions/guise?Id=123456789");
    ws.onopen = function() {
      $('#bSend').on("click", function() {
        return ws.send("New message");
      });
      $('#bClose').on("click", function(ev) {
        ws.close();
        $(messageContainer).text("Connection is forcefully closed");
        $(ev.target).addClass("disabled");
        $('#bSend').addClass("disabled");
        return $('#bConnect').removeClass("disabled");
      });
      $('#bClose').removeClass("disabled");
      $('#bSend').removeClass("disabled");
      return $(ev.target).addClass("disabled");
    };
    ws.onmessage = function(evt) {
      var received_msg;
      received_msg = evt.data;
      return $(messageContainer).text("Message is received..." + received_msg);
    };
    return ws.onclose = function() {
      return $(messageContainer).text("Connection is closed...");
    };
  };
  $('#bConnect').on("click", WebSocketTest);
  makeCounter = function() {
    var count;
    count = 0;
    return {
      increment: function() {
        return count++;
      },
      getCount: function() {
        return count;
      }
    };
  };
  counter = makeCounter();
  $('#bTest1').on("click", function() {
    counter.increment();
    return alert(counter.getCount());
  });
  $("#id2").dimmer({
    closable: false
  }).dimmer('show');
  data_uri = (function() {
    if (metabook.options["new"] === true) {
      if (metabook.api.file.name === "") {
        return metabook.api.template_endpoint;
      } else {
        return metabook.api.file.endpoint + metabook.api.file.path;
      }
    } else {
      return metabook.api.file.endpoint + metabook.api.file.path;
    }
  })();
  return metabook.api.get_ajax_data(data_uri, _.partial(init_graph, {}), error_graph);
});

init_graph = function(template, ajax_data) {
  var create_from, menuview, notebook, paper, uivent;
  create_from = "";
  if (!metabook.api.is_good_form(ajax_data)) {
    if (Object.keys(template).length === 0) {
      metabook.api.get_ajax_data(metabook.api.template_endpoint, _.partial(init_graph, _, ajax_data), error_graph);
      return;
    } else {
      create_from = "ipynb";
    }
  } else {
    if (metabook.api.is_good_form(template)) {
      create_from = "ipynb";
    } else {
      create_from = "native";
    }
  }
  notebook = new metabook.models.MetabookModel({}, {
    json: ajax_data,
    create_from: create_from,
    template: template
  });
  paper = init_jointjs(notebook);
  notebook.session = new metabook.api.Session(metabook.api.sessions_endpoint);
  $("#id2").dimmer('hide');
  $("#uiLeftSidebar").sidebar({
    context: $('#id2')
  });
  $("#uiLeftSidebar").sidebar('setting', 'transition', 'overlay');
  $("#uiLeftSidebar").sidebar('setting', 'dimPage', false);
  $("#uiLeftSidebar").sidebar('attach events', '#uiMenuToggle');
  $("#uiLeftSidebar").sidebar('setting', 'closable', false);
  ContextMenu.init(Settings);
  uivent = new metabook.ui.Vent();
  uivent.register({
    'session': notebook.session,
    'model': notebook
  });

  /*
  $("[data-action]").on('click', (e) ->
      action = e.target.dataset.action
      actions = Settings.ui.actions
      if `action in actions`
          ContextMenu.active_menu_off()
          actions[action].apply(paper, arguments)
  )
   */
  jointjs_attach_events(paper, paper.model);
  return menuview = new metabook.views.MenuView({
    el: $(".menu"),
    model: notebook
  });
};

error_graph = function(e) {
  $("#id2").dimmer('hide');
  return alert("Connection error. Check if your backend is running.");
};

//# sourceMappingURL=graph.js.map
