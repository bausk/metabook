// Generated by CoffeeScript 1.10.0
var Obj, Settings, bind_ui_actions, error_graph, func_add, func_delete, func_edit, init_graph;

func_add = function(e) {
  return alert("add");
};

func_edit = function(e) {
  return alert("edit");
};

func_delete = function(e) {
  return alert("delete" + e.pageX);
};

Settings = {
  active_menu_class: "context-menu--active",
  context_menu: {
    ".element": "#context-menu",
    "svg": "#context-menu2"
  },
  ui_actions: {
    "Add": func_add,
    "Edit": func_edit,
    "Delete": func_delete
  },
  id: {
    messages: "#messages",
    coords: "#coords",
    graph_container: "#paper_holder",
    paper: "#myholder",
    svg: "#v-2"
  }
};

Obj = {
  graph: void 0,
  mainpaper: void 0
};

$(document).ready(function() {
  var WebSocketTest, counter, makeCounter, messageContainer;
  WebSocketTest = void 0;
  messageContainer = $(Settings.id.messages);
  WebSocketTest = function(ev) {
    var ws;
    messageContainer.text("WebSocket is supported by your Browser!");
    ws = new WebSocket("ws://" + window.location.host + "/api/session/guise?Id=123456789");
    ws.onopen = function() {
      $('#bSend').on("click", function() {
        return ws.send("New message");
      });
      $('#bClose').on("click", function(ev) {
        ws.close();
        $(messageContainer).text("Connection is forcefully closed");
        $(ev.target).addClass("disabled");
        $('#bSend').addClass("disabled");
        return $('#bConnect').removeClass("disabled");
      });
      $('#bClose').removeClass("disabled");
      $('#bSend').removeClass("disabled");
      return $(ev.target).addClass("disabled");
    };
    ws.onmessage = function(evt) {
      var received_msg;
      received_msg = evt.data;
      return $(messageContainer).text("Message is received..." + received_msg);
    };
    return ws.onclose = function() {
      return $(messageContainer).text("Connection is closed...");
    };
  };
  $('#bConnect').on("click", WebSocketTest);
  makeCounter = function() {
    var count;
    count = 0;
    return {
      increment: function() {
        return count++;
      },
      getCount: function() {
        return count;
      }
    };
  };
  counter = makeCounter();
  $('#bTest1').on("click", function() {
    counter.increment();
    return alert(counter.getCount());
  });
  $("#id2").dimmer({
    closable: false
  }).dimmer('show');
  if (metabook.file_id === "") {
    return init_graph({});
  } else {
    return $.ajax({
      url: metabook.file_api_endpoint + metabook.path,
      type: 'GET',
      success: init_graph,
      error: error_graph
    });
  }
});

init_graph = function(graph_json) {
  var source_obj;
  $("#el_file_contents").text(graph_json);
  source_obj = graph_json;
  init_jointjs(source_obj);
  $("#id2").dimmer('hide');
  $("#uiLeftSidebar").sidebar({
    context: $('#id2')
  });
  $("#uiLeftSidebar").sidebar('setting', 'transition', 'overlay');
  $("#uiLeftSidebar").sidebar('setting', 'dimPage', false);
  $("#uiLeftSidebar").sidebar('attach events', '#uiMenuToggle');
  $("#uiLeftSidebar").sidebar('setting', 'closable', false);
  ContextMenu.init(Settings);
  bind_ui_actions(Settings);
  return jointjs_attach_events(Obj.mainpaper, Obj.graph);
};

bind_ui_actions = function(settings) {
  return $("[data-action]").on('click', function(e) {
    var action, actions;
    action = e.target.dataset.action;
    actions = settings.ui_actions;
    if (action in actions) {
      ContextMenu.active_menu_off();
      return actions[action].apply(this, arguments);
    }
  });
};

error_graph = function(e) {
  $("#id2").dimmer('hide');
  return alert("fuck u mimsy");
};

//# sourceMappingURL=graph.js.map
