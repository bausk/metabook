// Generated by CoffeeScript 1.10.0
var MetaGraph, imports,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  slice = [].slice;

imports = require('./ui');

MetaGraph = (function(superClass) {
  extend(MetaGraph, superClass);

  function MetaGraph() {
    return MetaGraph.__super__.constructor.apply(this, arguments);
  }

  MetaGraph.prototype.initialize = function(attrs, data) {
    var cells, elems_list, links, links_list;
    this.metabook = data;
    this.constructor.__super__.initialize.apply(this, arguments);
    elems_list = [];
    links_list = [];
    cells = this.metabook.get("cells");
    links = this.metabook.get("links");
    cells.each(function(cell_model) {
      var content, id, node, position, source;
      source = cell_model.get('source');
      id = cell_model.id;
      if (typeof source !== "string") {
        content = source.join("");
      } else {
        content = source;
      }
      position = cell_model.get('position');
      node = new joint.shapes.html.Node({
        id: id,
        position: {
          x: position.x,
          y: position.y
        },
        content: content,
        footing_content: "[ipynb cell]",
        node_markup: {
          node_viewer: '<div class="node_viewer python" data-metabook="true"></div>',
          node_editor: '<span class="ui form node_editor"><textarea class="node_coupled"></textarea></span>'
        },
        dimensions: {
          'min-height': 100,
          'max-height': 200,
          'min-width': 250,
          'max-width': 500
        },
        inPorts: cell_model.get('inPorts'),
        outPorts: cell_model.get('outPorts')
      }, {
        cell_model: cell_model
      });
      return elems_list.push(node);
    });
    links.each(function(link_model) {
      var link;
      link = new joint.shapes.html.Link({
        source: link_model.get('source'),
        target: link_model.get('target'),
        id: link_model.get('id')
      });
      return links_list.push(link);
    });
    return graph.addCells(slice.call(elems_list).concat(slice.call(links_list)));
  };

  MetaGraph.prototype.custom_events = {
    "node": imports.ui.Vent.passover,
    "newnode": function(ev) {
      return console.log("<graph:newnode>");
    }
  };

  return MetaGraph;

})(joint.dia.Graph);

module.exports = MetaGraph;

//# sourceMappingURL=graph.js.map
