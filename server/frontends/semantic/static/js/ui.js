// Generated by CoffeeScript 1.10.0
var ContextMenu;

ContextMenu = {

  /*
  Usage:
  selector is the element to bind menu to
  menu_id is the id of menu div that is being bound to selector
  settings.context_menu = { str selector: str menu_id, ... }
   */
  active_menu_class: "context-menu--active",
  active_menu: void 0,
  init: function(settings) {
    var context, menu_id, selector;
    this.active_menu_class = settings.active_menu_class || this.active_menu_class;
    context = settings.context_menu;
    this.active_menu = void 0;
    for (selector in context) {
      menu_id = context[selector];
      this.context_listener.apply(this, [selector, menu_id]);
    }
    this.clickListener();
    this.keyupListener();
    this.resizeListener();
    this.scrollListener();
  },
  context_listener: function(selector, menu_id) {
    $(selector).on('contextmenu', function(e) {
      e.preventDefault();
      if (ContextMenu.active_menu) {
        ContextMenu.active_menu_off();
      }
      ContextMenu.menu_on(menu_id);
      ContextMenu.position_active_menu(e);
      return e.stopPropagation();
    });
  },
  active_menu_off: function() {
    if (ContextMenu.active_menu) {
      ContextMenu.active_menu.classList.remove(ContextMenu.active_menu_class);
      ContextMenu.active_menu = void 0;
    }
  },
  menu_on: function(menu_id) {
    ContextMenu.active_menu = document.querySelector(menu_id);
    ContextMenu.active_menu.classList.add(ContextMenu.active_menu_class);
  },
  position_active_menu: function(e) {
    var menuHeight, menuWidth, ref, windowHeight, windowWidth, x, y;
    ref = ContextMenu.getPosition(e), x = ref.x, y = ref.y;
    menuWidth = ContextMenu.active_menu.offsetWidth + 4;
    menuHeight = ContextMenu.active_menu.offsetHeight + 4;
    windowWidth = window.innerWidth;
    windowHeight = window.innerHeight;
    if (windowWidth - x < menuWidth) {
      ContextMenu.active_menu.style.left = windowWidth - menuWidth + 'px';
    } else {
      ContextMenu.active_menu.style.left = x + 'px';
    }
    if (windowHeight - y < menuHeight) {
      ContextMenu.active_menu.style.top = windowHeight - menuHeight + 'px';
    } else {
      ContextMenu.active_menu.style.top = y + 'px';
    }
  },
  getPosition: function(e) {
    var posx, posy;
    posx = 0;
    posy = 0;
    if (e == null) {
      e = window.event;
    }
    if (e.pageX) {
      posx = e.pageX;
      posy = e.pageY;
    } else {
      posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
      posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
    }
    return {
      x: posx,
      y: posy - 12
    };
  },
  clickListener: function() {
    return document.addEventListener("click", function(e) {
      ContextMenu.active_menu_off();
    });
  },
  keyupListener: function() {
    window.onkeyup = function(e) {
      if (e.keyCode === 27) {
        ContextMenu.active_menu_off();
      }
    };
  },
  resizeListener: function() {
    window.onresize = function(e) {
      ContextMenu.active_menu_off();
    };
  },
  scrollListener: function() {
    $('#myholder').on('mousewheel', function(e) {
      ContextMenu.active_menu_off();
    });
  }
};

metabook.ui.add = function(e) {
  return alert("add");
};

metabook.ui.edit = function(e) {
  return alert("edit");
};

metabook.ui["delete"] = function(e) {
  return alert("delete" + e.pageX);
};

metabook.ui.save = function(e) {
  return alert('save');
};

$("[data-action]").click(function(evt) {
  var action;
  action = $(this).data('action');
  if (Settings.ui.actions.hasOwnProperty(action)) {
    return Settings.ui.actions[action](evt);
  }
});

//# sourceMappingURL=ui.js.map
