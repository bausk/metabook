// Generated by CoffeeScript 1.10.0
metabook.connect = {};

metabook.connect.Session = (function() {
  function Session(url, notebook_id) {
    this.id = joint.util.uuid();
    this.ws = new WebSocket("ws://" + url + this.id + "?notebook_id=" + notebook_id);
    this.ws.onopen = this.onopen;
    this.ws.onmessage = this.onmessage;
    this.ws.onclose = this.onclose;
  }

  Session.prototype.onopen = function(evt) {
    return console.log('<connection onopen>');
  };

  Session.prototype.run_cell = function(node_model, event) {
    var cells, ids, links, msg;
    cells = metabook.data.get_cells(node_model.graph.metabook);
    links = metabook.data.get_links(node_model.graph.metabook);
    ids = [node_model.id];
    msg = new metabook.connect.Message({
      session: this.id,
      msg_type: "update",
      content: {
        cells: cells,
        links: links,
        ids: ids
      }
    });
    return this.ws.send(msg.serialize());
  };

  Session.prototype.solve_all = function(metabook_model, event) {
    var cells, ids, links, msg;
    cells = metabook.data.get_cells(metabook_model);
    links = metabook.data.get_links(metabook_model);
    ids = metabook.data.get_ids(cells);
    msg = new metabook.connect.Message({
      session: this.id,
      msg_type: "solve",
      content: {
        cells: cells,
        links: links,
        ids: ids
      }
    });
    this.ws.send(msg.serialize());
    return console.log("solve_all: " + this.id);
  };

  Session.prototype.onmessage = function(evt) {
    return console.log(JSON.parse(evt.data));
  };

  Session.prototype.onclose = function(evt) {
    return alert(evt);
  };

  Session.prototype.custom_events = {
    'run': Session.prototype.run_cell
  };

  return Session;

})();

metabook.connect.Message = (function() {
  function Message(arg) {
    var msg_type, session;
    session = arg.session, msg_type = arg.msg_type, this.header = arg.header, this.parent_header = arg.parent_header, this.metadata = arg.metadata, this.content = arg.content;
    if (this.header == null) {
      this.header = this.defaults.header();
    }
    this.header.session = session;
    this.header.msg_type = msg_type;
    if (this.metadata == null) {
      this.metadata = this.defaults.metadata;
    }
    if (this.parent_header == null) {
      this.parent_header = this.defaults.parent_header;
    }
    if (this.content == null) {
      this.content = this.defaults.content;
    }
  }

  Message.prototype.defaults = {
    header: function() {
      return {
        msg_id: joint.util.uuid(),
        username: "default",
        session: "",
        date: "",
        msg_type: "default",
        version: '1'
      };
    },
    metadata: {},
    parent_header: {},
    content: {}
  };

  Message.prototype.serialize = function() {
    return JSON.stringify(this);
  };

  return Message;

})();

//# sourceMappingURL=connect.js.map
