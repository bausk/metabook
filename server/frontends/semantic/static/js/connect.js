// Generated by CoffeeScript 1.10.0
(function() {
  var Message, Session, imports;

  imports = {
    data: require("./data"),
    websocket: require("./websocket")
  };

  Session = (function() {
    function Session(url) {
      _.extend(this, Backbone.Events);
      this.id = joint.util.uuid();
      this.promise = new Promise((function(_this) {
        return function(resolve, reject) {
          _this.ws = new imports.websocket("ws://" + url + _this.id, null, {
            debug: true,
            reconnectInterval: 1000,
            maxReconnectInterval: 30000,
            reconnectDecay: 1.5
          });
          _this.ws.onopen = _.partial(_this.onopen, resolve);
          _this.ws.onmessage = _this.onmessage;
          return _this.ws.onclose = _.partial(_this.onclose, reject);
        };
      })(this));
    }

    Session.prototype.onopen = function(resolve, evt) {
      console.log('<connect.js connection:open>');
      Backbone.trigger("connection:open", this);
      return resolve();
    };

    Session.prototype.connect_file = function(path) {
      return this.promise.then((function(_this) {
        return function() {
          return _this.file = new Promise(function(resolve, reject) {
            var msg;
            msg = _this.new_message({
              type: 'message:file:connect',
              content: {
                path: path,
                query: config.file.query
              }
            });
            _this.ws.send(msg.serialize());
            _this.listenTo(Backbone, 'message:file:connected', resolve);
            _this.listenTo(Backbone, 'message:file:error', reject);
            return _this.file;
          });
        };
      })(this));
    };

    Session.prototype.new_message = function(arg) {
      var content, type;
      type = arg.type, content = arg.content;
      return Message["new"]({
        session: this.id,
        msg_type: type,
        content: content
      });
    };

    Session.prototype.run_cell = function(node_model, event) {
      var cells, ids, links, msg;
      cells = importsimports.data.get_cells(node_model.graph.metabook);
      links = importsimports.data.get_links(node_model.graph.metabook);
      ids = [node_model.id];
      msg = new Message({
        session: this.id,
        msg_type: "update",
        content: {
          cells: cells,
          links: links,
          ids: ids
        }
      });
      return this.ws.send(msg.serialize());
    };

    Session.prototype.solve_all = function(metabook_model, event) {
      var cells, ids, links, msg;
      cells = imports.data.get_cells(metabook_model);
      links = imports.data.get_links(metabook_model);
      ids = imports.data.get_ids(cells);
      msg = new Message({
        session: this.id,
        msg_type: "solve",
        content: {
          cells: cells,
          links: links,
          ids: ids
        }
      });
      this.ws.send(msg.serialize());
      return console.log("solve_all: " + this.id);
    };

    Session.prototype.onmessage = function(evt) {
      var message;
      message = new Message(JSON.parse(evt.data));
      return Backbone.trigger(message.header.msg_type, message);
    };

    Session.prototype.onclose = function(promise, evt) {
      console.log("<connect.js session closed>");
      return Backbone.trigger('connection:closed', this);
    };

    Session.prototype.custom_events = {
      'run': Session.prototype.run_cell
    };

    return Session;

  })();

  Message = (function() {
    function Message(arg) {
      this.header = arg.header, this.parent_header = arg.parent_header, this.metadata = arg.metadata, this.content = arg.content;
    }

    Message["new"] = function(arg) {
      var content, header, metadata, msg_type, parent_header, session;
      session = arg.session, msg_type = arg.msg_type, header = arg.header, parent_header = arg.parent_header, metadata = arg.metadata, content = arg.content;
      if (header == null) {
        header = this.defaults.header();
      }
      header.session = session;
      header.msg_type = msg_type;
      if (metadata == null) {
        metadata = this.defaults.metadata;
      }
      if (parent_header == null) {
        parent_header = this.defaults.parent_header;
      }
      if (content == null) {
        content = this.defaults.content;
      }
      return new Message({
        header: header,
        parent_header: parent_header,
        metadata: metadata,
        content: content
      });
    };

    Message.defaults = {
      header: function() {
        return {
          msg_id: joint.util.uuid(),
          username: "default",
          session: "",
          date: "",
          msg_type: "default",
          version: '1'
        };
      },
      metadata: {},
      parent_header: {},
      content: {}
    };

    Message.prototype.serialize = function() {
      return JSON.stringify(this);
    };

    return Message;

  })();

  module.exports = {
    Session: Session,
    Message: Message
  };

}).call(this);

//# sourceMappingURL=connect.js.map
