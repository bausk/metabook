// Generated by CoffeeScript 1.10.0
var init_jointjs, paper;

paper = void 0;

init_jointjs = function(obj) {
  var draggable, dragpoint, graph, link, offsetToLocalPoint, origin, paper_holder, paperscale, rect, rect2;
  paper_holder = $('#paper_holder');
  graph = new joint.dia.Graph();
  paper = new joint.dia.Paper({
    el: $('#myholder'),
    width: paper_holder.width(),
    height: paper_holder.height(),
    model: graph,
    gridSize: 1
  });
  $(window).resize(function() {
    return paper.setDimensions(paper_holder.width(), paper_holder.height());
  });
  rect = new joint.shapes.basic.Rect({
    position: {
      x: 100,
      y: 30
    },
    size: {
      width: 100,
      height: 30
    },
    attrs: {
      rect: {
        fill: "blue"
      },
      text: {
        text: 'my box',
        fill: 'white'
      }
    }
  });
  rect2 = rect.clone();
  rect2.translate(300);
  link = new joint.dia.Link({
    source: {
      id: rect.id
    },
    target: {
      id: rect2.id
    }
  });
  graph.addCells([rect, rect2, link]);
  paperscale = 1;
  origin = [0, 0];
  offsetToLocalPoint = function(offsetX, offsetY) {
    var svgPoint;
    svgPoint = paper.svg.createSVGPoint();
    svgPoint.x = offsetX;
    svgPoint.y = offsetY;
    return svgPoint.matrixTransform(paper.viewport.getCTM().inverse());
  };
  $('#myholder').on("mousewheel", function(ev) {
    var coord1, coord2, delta, newScale, p;
    ev.preventDefault();
    ev = ev.originalEvent;
    coord1 = ev.offsetX;
    coord2 = ev.offsetY;
    delta = 1.2;
    p = offsetToLocalPoint(coord1, coord2);
    if (ev.deltaY > 0) {
      newScale = V(paper.viewport).scale().sx / delta;
    } else {
      newScale = V(paper.viewport).scale().sx * delta;
    }
    $('#messages').text([V(paper.viewport).toLocalPoint(0, 0).x, V(paper.viewport).toLocalPoint(0, 0).y, p.x, p.y].join(", "));
    if (newScale > 0.1 && newScale < 10) {
      paper.scale(newScale, newScale);
      return paper.setOrigin(coord1 - newScale * p.x, coord2 - newScale * p.y);
    }
  });

  /*
  panAndZoom = svgPanZoom(
      '#v-2',
      {
          #viewportSelector: $('#v-2'),
          fit: false,
          zoomScaleSensitivity: 0.4,
          #panEnabled: false,
          #zoomEnabled: false
      }
  )
   */
  draggable = false;
  dragpoint = {
    x: 0,
    y: 0,
    paper_x: 0,
    paper_y: 0,
    client_x: 0,
    client_y: 0,
    offset_x: 0,
    offset_y: 0
  };
  paper.on('blank:pointerdown', function(evt, x, y) {
    var point;
    evt = evt.originalEvent;
    dragpoint.x = evt.pageX;
    dragpoint.y = evt.pageY;
    point = paper.svg.createSVGPoint().matrixTransform(paper.viewport.getCTM().inverse());
    dragpoint.offset_x = point.x * V(paper.viewport).scale().sx;
    dragpoint.offset_y = point.y * V(paper.viewport).scale().sy;
    draggable = true;
    return $("#messages").text('Pointer down, x:' + dragpoint.offset_x + ", y:" + dragpoint.offset_y);
  });
  $("#paper_holder").on("mousemove", function(e) {
    if (draggable) {
      $("#messages").text(e.originalEvent.pageX);
      return paper.setOrigin(-dragpoint.offset_x + e.pageX - dragpoint.x, -dragpoint.offset_y + e.pageY - dragpoint.y);
    }
  });
  $(window).on('mouseup', function(e) {
    draggable = false;
    return $("#messages").text('mouse up');
  });
  return paper.on('blank:pointerup', function(cellView, event) {
    draggable = false;
    return $("#messages").text('Pointer up');
  });
};

//# sourceMappingURL=graph_jointjs.js.map
