// Generated by CoffeeScript 1.10.0
var custom_shapes, graphics, init_jointjs, jointjs_attach_events,
  slice = [].slice;

graphics = {};

custom_shapes = [];

init_jointjs = function(obj) {
  var cells, code_cells, elements, graph, i, len, link, links, node, paper, paper_holder, prev_node, pycell, setting_increment_x, setting_increment_y, setting_start_x, setting_start_y;
  paper_holder = $(Settings.id.graph_container);
  Obj.graph = new joint.dia.Graph();
  Obj.mainpaper = new GraphPaper({
    el: $(Settings.id.paper),
    width: paper_holder.width(),
    height: paper_holder.height(),
    model: Obj.graph,
    gridSize: 1,
    defaultLink: new joint.shapes.html.Link
  });
  paper = Obj.mainpaper;
  graph = Obj.graph;
  cells = obj.cells;
  setting_start_x = 30;
  setting_start_y = 30;
  setting_increment_x = 400;
  setting_increment_y = 100;
  elements = [];
  links = [];
  if (metabook.file_id === "") {
    elements.push(new joint.shapes.html.Node({
      position: {
        x: setting_start_x,
        y: setting_start_y
      }
    }));
  } else {
    prev_node = void 0;
    code_cells = _.filter(obj.cells, function(o) {
      return o['cell_type'] === "code";
    });
    for (i = 0, len = code_cells.length; i < len; i++) {
      pycell = code_cells[i];
      node = new joint.shapes.html.Node({
        position: {
          x: setting_start_x,
          y: setting_start_y
        },
        metabook: {
          content: pycell.source.join("<br/>\n"),
          footing_content: "ipynb cell [" + pycell.execution_count + "]"
        }
      });
      elements.push(node);
      if (prev_node) {
        link = new joint.shapes.html.Link({
          source: {
            id: prev_node.id,
            port: 'out1'
          },
          target: {
            id: node.id,
            port: 'in1'
          }
        });
        links.push(link);
      }
      prev_node = node;
      setting_start_x += setting_increment_x;
      setting_start_y += setting_increment_y;
    }
  }

  /*
  l2 = new joint.shapes.html.Link({
      source:
          id: el1.id
          port: 'out1'
      target:
          id: el2.id
          port: 'in1'
  })
   */
  return graph.addCells(slice.call(elements).concat(slice.call(links)));
};

jointjs_attach_events = function(paper, graph) {
  var selection, selectionView;
  selection = new Backbone.Collection;
  selectionView = new joint.ui.SelectionView({
    paper: paper,
    graph: graph,
    model: selection
  });
  return paper.on('blank:pointerdown', selectionView.startSelecting);
};

//# sourceMappingURL=graph_jointjs.js.map
