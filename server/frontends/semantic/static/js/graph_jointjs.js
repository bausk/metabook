// Generated by CoffeeScript 1.10.0
var custom_shapes, extend, graphics, init_jointjs, jointjs_attach_events;

graphics = {};

custom_shapes = [];

joint.shapes.html = {};

init_jointjs = function(obj) {
  var cells, el1, el2, graph, l, paper, paper_holder, setting_increment_x, setting_increment_y, setting_start_x, setting_start_y;
  paper_holder = $(Settings.id.graph_container);
  Settings.obj.graph = new joint.dia.Graph();
  Settings.obj.paper = new joint.dia.Paper({
    el: $(Settings.id.paper),
    width: paper_holder.width(),
    height: paper_holder.height(),
    model: Settings.obj.graph,
    gridSize: 1
  });
  paper = Settings.obj.paper;
  graph = Settings.obj.graph;
  extend(paper);
  $(window).resize(function() {
    return paper.setDimensions(paper_holder.width(), paper_holder.height());
  });
  joint.shapes.html.Element = joint.shapes.basic.Rect.extend({
    defaults: joint.util.deepSupplement({
      type: 'html.Element',
      attrs: {
        rect: {
          stroke: 'none',
          'fill-opacity': 0
        }
      }
    }, joint.shapes.basic.Rect.prototype.defaults)
  });
  joint.shapes.html.ElementView = joint.dia.ElementView.extend({
    template: ['<div style="position:absolute">', '<table class="ui table">', '<button class="ui delete button">x</button>', '<label class="ui label"></label>', '<span></span>', '<br/>', '<select><option>--</option><option>one</option><option>two</option></select>', '<input type="text" value="I\'m HTML input" />', '</table>', '</div>'].join(''),
    initialize: function() {
      _.bindAll(this, 'updateBox');
      joint.dia.ElementView.prototype.initialize.apply(this, arguments);
      this.isdraggable = false;
      this.dragpoint = {
        x: 0,
        y: 0,
        paper_x: 0,
        paper_y: 0,
        client_x: 0,
        client_y: 0,
        offset_x: 0,
        offset_y: 0
      };
      this.$box = $(_.template(this.template)());
      this.$box.find('label').on('mousedown', _.bind((function(evt) {
        var point, point2;
        evt = evt.originalEvent;
        if (evt.which !== 1) {
          return;
        }
        this.dragpoint.x = evt.pageX;
        this.dragpoint.y = evt.pageY;
        point = Settings.obj.paper.svg.createSVGPoint().matrixTransform(Settings.obj.paper.viewport.getCTM().inverse());
        this.dragpoint.offset_x = point.x * V(Settings.obj.paper.viewport).scale().sx;
        this.dragpoint.offset_y = point.y * V(Settings.obj.paper.viewport).scale().sy;
        point2 = paper.offsetToLocalPoint(this.dragpoint.x, this.dragpoint.y);
        this.dragpoint.paper_x = point2.x;
        this.dragpoint.paper_y = point2.y;
        this.dragpoint.client_x = this.model.get('position').x;
        this.dragpoint.client_y = this.model.get('position').y;
        return this.isdraggable = true;
      }), this));
      Settings.obj.paper.$el.on('mousemove', _.bind((function(evt) {
        var point;
        if (this.isdraggable) {
          if (evt.buttons !== 1) {
            this.isdraggable = false;
            return;
          }
          evt = evt.originalEvent;
          point = paper.offsetToLocalPoint(evt.pageX, evt.pageY);
          return this.model.set('position', {
            x: this.dragpoint.client_x - this.dragpoint.paper_x + point.x,
            y: this.dragpoint.client_y - this.dragpoint.paper_y + point.y
          });
        }

        /*
        evt = evt.originalEvent
        return if evt.which != 1
        @dragpoint.x = evt.pageX
        @dragpoint.y = evt.pageY
        point = Settings.obj.paper.svg.createSVGPoint().matrixTransform(Settings.obj.paper.viewport.getCTM().inverse())
        @dragpoint.offset_x = point.x * V(paper.viewport).scale().sx
        @dragpoint.offset_y = point.y * V(paper.viewport).scale().sy
        @paper_isdraggable = true
        #@model.set 'position', { x: 370, y: 300}
         */
      }), this));
      $(window).on('mouseup', _.bind((function(e) {
        return this.isdraggable = false;
      }), this));
      this.$box.find('input,select').on('mousedown click', function(evt) {
        return evt.stopPropagation();
      });
      this.$box.find('input').on('change', _.bind((function(evt) {
        this.model.set('input', $(evt.target).val());
      }), this));
      this.$box.find('select').on('change', _.bind((function(evt) {
        return this.model.set('select', $(evt.target).val());
      }), this));
      this.$box.find('select').val(this.model.get('select'));
      this.$box.find('.delete').on('click', _.bind(this.model.remove, this.model));
      this.model.on('change', this.updateBox, this);
      this.model.on('remove', this.removeBox, this);
      this.updateBox();
      return custom_shapes.push(this);
    },
    render: function() {
      joint.dia.ElementView.prototype.render.apply(this, arguments);
      this.paper.$el.prepend(this.$box);
      this.updateBox();
      return this;
    },
    updateBox: function() {
      var bbox, ref, scale, x, y;
      bbox = this.model.getBBox();
      ref = paper.getRealCoords(bbox.x, bbox.y), x = ref.x, y = ref.y;
      bbox.x = x;
      bbox.y = y;
      scale = paper.getScale();
      $(Settings.id.messages).text(bbox);
      this.$box.find('label').text(this.model.get('label'));
      this.$box.find('span').text(this.model.get('select'));
      this.$box.css('transform-origin', 'left top');
      return this.$box.css({
        width: bbox.width,
        height: bbox.height,
        left: bbox.x,
        top: bbox.y,
        transform: 'rotate(' + (this.model.get('angle') || 0) + 'deg) scale(' + scale + ')'
      });
    },
    removeBox: function(evt) {
      return this.$box.remove();
    }
  });
  cells = obj.cells;
  setting_start_x = 30;
  setting_start_y = 30;
  setting_increment_x = 200;
  setting_increment_y = 100;
  el1 = new joint.shapes.html.Element({
    position: {
      x: 80,
      y: 80
    },
    size: {
      width: 170,
      height: 100
    },
    label: 'I am HTML',
    select: 'one'
  });
  el2 = new joint.shapes.html.Element({
    position: {
      x: 370,
      y: 160
    },
    size: {
      width: 170,
      height: 100
    },
    label: 'Me too',
    select: 'two'
  });
  l = new joint.dia.Link({
    source: {
      id: el1.id
    },
    target: {
      id: el2.id
    },
    attrs: {
      '.connection': {
        'stroke-width': 5,
        stroke: '#34495E'
      }
    }
  });
  return graph.addCells([el1, el2, l]);

  /*
  rect = new joint.shapes.basic.Rect({
      position: { x: 100, y: 30 },
      size: { width: 100, height: 30 },
      attrs: { rect: { fill: "blue" }, text: { text: 'my box', fill: 'white' } }
  })
  
  rect2 = rect.clone()
  rect2.translate(300)
  link = new joint.dia.Link({
      source: { id: rect.id },
      target: { id: rect2.id }
  })
  
  graph.addCells([rect, rect2, link])
   */
};

jointjs_attach_events = function(paper, graph) {
  var paper_dragpoint, paper_isdraggable, selection, selectionView;
  selection = new Backbone.Collection;
  selectionView = new joint.ui.SelectionView({
    paper: paper,
    graph: graph,
    model: selection
  });
  paper.on('blank:pointerdown', selectionView.startSelecting);
  $(Settings.id.paper).on("mousewheel", function(ev) {
    var coord1, coord2, delta, elem, i, len, newScale, p, results;
    ev.preventDefault();
    ev = ev.originalEvent;
    coord1 = ev.offsetX;
    coord2 = ev.offsetY;
    delta = 1.2;
    p = paper.offsetToLocalPoint(coord1, coord2);
    if (ev.wheelDelta < 0) {
      newScale = V(paper.viewport).scale().sx / delta;
    } else {
      newScale = V(paper.viewport).scale().sx * delta;
    }
    if (newScale > 0.1 && newScale < 10) {
      paper.scale(newScale, newScale);
      paper.setOrigin(coord1 - newScale * p.x, coord2 - newScale * p.y);
    }
    results = [];
    for (i = 0, len = custom_shapes.length; i < len; i++) {
      elem = custom_shapes[i];
      results.push(elem.updateBox());
    }
    return results;
  });
  paper_isdraggable = false;
  paper_dragpoint = {
    x: 0,
    y: 0,
    paper_x: 0,
    paper_y: 0,
    client_x: 0,
    client_y: 0,
    offset_x: 0,
    offset_y: 0
  };
  paper.on('blank:pointerdown', function(evt, x, y) {
    var point;
    evt = evt.originalEvent;
    if (evt.which !== 2) {
      return;
    }
    paper_dragpoint.x = evt.pageX;
    paper_dragpoint.y = evt.pageY;
    point = paper.svg.createSVGPoint().matrixTransform(paper.viewport.getCTM().inverse());
    paper_dragpoint.offset_x = point.x * V(paper.viewport).scale().sx;
    paper_dragpoint.offset_y = point.y * V(paper.viewport).scale().sy;
    return paper_isdraggable = true;
  });
  $(Settings.id.paper).on("mousemove", function(e) {
    var elem, i, len, results;
    if (paper_isdraggable) {
      paper.setOrigin(-paper_dragpoint.offset_x + e.pageX - paper_dragpoint.x, -paper_dragpoint.offset_y + e.pageY - paper_dragpoint.y);
      results = [];
      for (i = 0, len = custom_shapes.length; i < len; i++) {
        elem = custom_shapes[i];
        results.push(elem.updateBox());
      }
      return results;
    }
  });
  $(window).on('mouseup', function(e) {
    paper_isdraggable = false;
    return $(Settings.id.messages).text('mouse up');
  });
  return paper.on('blank:pointerup', function(cellView, event) {
    paper_isdraggable = false;
    return $(Settings.id.messages).text('Pointer up');
  });
};

extend = function(paper) {
  paper.offsetToLocalPoint = function(offsetX, offsetY) {
    var svgPoint;
    svgPoint = this.svg.createSVGPoint();
    svgPoint.x = offsetX;
    svgPoint.y = offsetY;
    return svgPoint.matrixTransform(this.viewport.getCTM().inverse());
  };
  paper.getScale = function() {
    return V(paper.viewport).scale().sx;
  };
  paper.getRealCoords = function(modelX, modelY) {
    var offset, x, y;
    offset = paper.svg.createSVGPoint().matrixTransform(paper.viewport.getCTM().inverse());
    x = (modelX - offset.x) * paper.getScale();
    y = (modelY - offset.y) * paper.getScale();
    return {
      x: x,
      y: y
    };
  };
  return paper.getModelCoords = function(pageX, pageY) {
    var offset, x, y;
    offset = paper.svg.createSVGPoint().matrixTransform(paper.viewport.getCTM().inverse());
    x = pageX / paper.getScale() + offset.x;
    y = pageY / paper.getScale() + offset.y;
    return {
      x: x,
      y: y
    };
  };
};

//# sourceMappingURL=graph_jointjs.js.map
