// Generated by CoffeeScript 1.10.0
var GraphPaper;

joint.shapes.html = {};

GraphPaper = joint.dia.Paper.extend({
  origin: {
    x: 0,
    y: 0
  },
  current_scale: 1,
  draggable: false,
  dragpoint: {
    x: 0,
    y: 0,
    offset_x: 0,
    offset_y: 0
  },
  initialize: function() {
    joint.dia.Paper.prototype.initialize.apply(this, arguments);
    _.bindAll(this, 'offsetToLocalPoint', 'updateOrigin', 'updateScale', 'getRealCoords');
    this.updateOrigin();
    this.updateScale();
    $(window).resize(_.bind((function() {
      return this.setDimensions(this.$el.width(), this.$el.height());
    }), this));
    this.on('cell:pointerdown cell:mouseover', function(cellView, evt, x, y) {
      if ($(evt.target).parent().hasClass("link")) {
        return cellView.options.interactive = false;
      }
    });
    this.on('all', function(evt, x, y) {
      return console.log(evt);
    });
    this.$el.on('mousedown', _.bind((function(evt, x, y) {
      evt.preventDefault();
      evt = evt.originalEvent;
      if (evt.which !== 2) {
        return;
      }
      this.dragpoint.x = evt.pageX;
      this.dragpoint.y = evt.pageY;
      this.dragpoint.offset_x = this.origin.x * this.current_scale;
      this.dragpoint.offset_y = this.origin.y * this.current_scale;
      return this.draggable = true;
    }), this));
    this.$el.on("mousewheel", _.bind((function(ev) {
      var coord1, coord2, delta, elem, i, len, newScale, p, results;
      ev.preventDefault();
      ev = ev.originalEvent;
      coord1 = $(ev.target).offset().left + ev.offsetX - this.$el.offset().left;
      coord2 = $(ev.target).offset().top + ev.offsetY - this.$el.offset().top;
      delta = 1.2;
      p = this.offsetToLocalPoint(coord1, coord2);
      if (ev.wheelDelta < 0) {
        newScale = this.current_scale / delta;
      } else {
        newScale = this.current_scale * delta;
      }
      if (newScale > 0.1 && newScale < 10) {
        this.scale(newScale, newScale);
        this.setOrigin(coord1 - newScale * p.x, coord2 - newScale * p.y);
        this.updateScale();
        this.updateOrigin();
        results = [];
        for (i = 0, len = custom_shapes.length; i < len; i++) {
          elem = custom_shapes[i];
          results.push(elem.updateBox());
        }
        return results;
      }
    }), this));
    this.$el.on("mousemove", _.bind((function(e) {
      var elem, i, len, results;
      if (this.draggable) {
        this.setOrigin(-this.dragpoint.offset_x + e.pageX - this.dragpoint.x, -this.dragpoint.offset_y + e.pageY - this.dragpoint.y);
        this.updateOrigin();
        results = [];
        for (i = 0, len = custom_shapes.length; i < len; i++) {
          elem = custom_shapes[i];
          results.push(elem.updateBox());
        }
        return results;
      }
    }), this));
    $(window).on('mouseup', function(e) {
      return this.draggable = false;
    });
    return this.on('blank:pointerup', function(cellView, event) {
      return this.draggable = false;
    });
  },
  offsetToLocalPoint: function(offsetX, offsetY) {
    var svgPoint;
    svgPoint = this.svg.createSVGPoint();
    svgPoint.x = offsetX;
    svgPoint.y = offsetY;
    return svgPoint.matrixTransform(this.viewport.getCTM().inverse());
  },
  updateScale: function() {
    return this.current_scale = V(this.viewport).scale().sx;
  },
  updateOrigin: function() {
    return this.origin = this.svg.createSVGPoint().matrixTransform(this.viewport.getCTM().inverse());
  },
  getRealCoords: function(modelX, modelY) {
    var offset, x, y;
    offset = this.origin;
    x = (modelX - offset.x) * this.current_scale;
    y = (modelY - offset.y) * this.current_scale;
    $(Settings.id.coords).text(modelX + ":" + modelY + "/" + x + ":" + y);
    return {
      x: x,
      y: y
    };
  },
  getModelCoords: function(pageX, pageY) {
    var offset, x, y;
    offset = this.origin;
    x = pageX / this.current_scale + offset.x;
    y = pageY / this.current_scale + offset.y;
    return {
      x: x,
      y: y
    };
  }
});

//# sourceMappingURL=elements.js.map
