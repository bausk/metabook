// Generated by CoffeeScript 1.10.0
var metabook,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

metabook = {
  session: {},
  messages: {},
  ui: {},
  api: {},
  models: {},
  views: {},
  defaults: {}
};

metabook.api.get_template = function(success, error) {
  return $.ajax({
    url: metabook.api.template_endpoint + metabook.api.path,
    type: 'GET',
    success: success,
    error: error
  });
};

metabook.api.get_file = function(success, error) {
  return $.ajax({
    url: metabook.api.file_endpoint + metabook.api.path,
    type: 'GET',
    success: success,
    error: error
  });
};

metabook.models.CellModel = (function(superClass) {
  extend(CellModel, superClass);

  function CellModel() {
    return CellModel.__super__.constructor.apply(this, arguments);
  }

  CellModel.prototype.initialize = function(attributes, data) {};

  CellModel.prototype.update_data = function(data) {
    return this.set('source', data);
  };

  return CellModel;

})(Backbone.Model);

metabook.models.CellCollection = (function(superClass) {
  extend(CellCollection, superClass);

  function CellCollection() {
    return CellCollection.__super__.constructor.apply(this, arguments);
  }

  CellCollection.prototype.model = metabook.models.CellModel;

  return CellCollection;

})(Backbone.Collection);

metabook.models.MetabookModel = (function(superClass) {
  extend(MetabookModel, superClass);

  function MetabookModel() {
    return MetabookModel.__super__.constructor.apply(this, arguments);
  }

  MetabookModel.prototype.initialize = function(attributes, data) {
    if (!('metabook' in data.json.metadata)) {
      data.json.metadata.metabook = data.template.metadata.metabook;
    }
    this.set('nbformat', data.json.nbformat);
    this.set('nbformat_minor', data.json.nbformat_minor);
    this.set('metadata', data.json.metadata);
    if (data.json.metadata.metabook.id) {
      this.set('id', data.json.metadata.metabook.id);
    }
    return this.metadata = data.json.metadata;
  };

  MetabookModel.prototype.actions = {
    'notebook.save': function(ev) {
      var call_type, data;
      data = JSON.stringify(this);
      call_type = this.id ? 'PUT' : 'POST';
      return $.ajax({
        url: metabook.api.file_endpoint + metabook.api.path,
        type: call_type,
        data: data,
        success: _.bind((function(json_data, status, xhr) {
          alert('Succesfully uploaded data.');
          if (json_data.new_id) {
            this.set('id', json_data.new_id);
            return history.replaceState(null, null, "./" + json_data.new_name);
          }
        }), this),
        error: error_graph
      });
    }
  };

  return MetabookModel;

})(Backbone.Model);

metabook.views.MenuView = (function(superClass) {
  extend(MenuView, superClass);

  function MenuView() {
    return MenuView.__super__.constructor.apply(this, arguments);
  }

  MenuView.prototype.events = {
    "click [data-action]": function(ev) {
      return _.bind(this.model.actions[$(ev.target).data('action')], this.model)(ev);
    }
  };

  return MenuView;

})(Backbone.View);

//# sourceMappingURL=metabook.js.map
