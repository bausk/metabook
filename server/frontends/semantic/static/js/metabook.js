// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

metabook.models = {};

metabook.views = {};

metabook.models.CellModel = (function(superClass) {
  extend(CellModel, superClass);

  function CellModel() {
    return CellModel.__super__.constructor.apply(this, arguments);
  }

  CellModel.prototype.initialize = function(attributes, data) {};

  CellModel.prototype.update_data = function(graph_cell) {
    var content, d;
    d = "\n";
    content = _.map(graph_cell.get('content').split(d), function(el) {
      return el + d;
    });
    if (_.last(content) === d) {
      content.pop();
    }
    this.set('source', content);
    this.set('inPorts', graph_cell.get('inPorts'));
    this.set('outPorts', graph_cell.get('outPorts'));
    return this.set('position', graph_cell.get('position'));
  };

  return CellModel;

})(Backbone.Model);

metabook.models.LinkModel = (function(superClass) {
  extend(LinkModel, superClass);

  function LinkModel() {
    return LinkModel.__super__.constructor.apply(this, arguments);
  }

  LinkModel.prototype.initialize = function(attributes, data) {};

  LinkModel.prototype.update_data = function(graph_link) {};

  return LinkModel;

})(Backbone.Model);

metabook.models.CellCollection = (function(superClass) {
  extend(CellCollection, superClass);

  function CellCollection() {
    return CellCollection.__super__.constructor.apply(this, arguments);
  }

  CellCollection.prototype.model = metabook.models.CellModel;

  return CellCollection;

})(Backbone.Collection);

metabook.models.LinkCollection = (function(superClass) {
  extend(LinkCollection, superClass);

  function LinkCollection() {
    return LinkCollection.__super__.constructor.apply(this, arguments);
  }

  LinkCollection.prototype.model = metabook.models.LinkModel;

  return LinkCollection;

})(Backbone.Collection);

metabook.models.MetabookModel = (function(superClass) {
  var data;

  extend(MetabookModel, superClass);

  function MetabookModel() {
    return MetabookModel.__super__.constructor.apply(this, arguments);
  }

  MetabookModel.prototype.initialize = function(attributes, arg) {
    var cell, cell_collection, cell_model, i, j, json_graph, len, len1, link_collection, link_model, ref, ref1;
    json_graph = arg.json_graph;
    cell_collection = new metabook.models.CellCollection();
    ref = json_graph.cells;
    for (i = 0, len = ref.length; i < len; i++) {
      cell = ref[i];
      cell_model = new metabook.models.CellModel(cell);
      cell_collection.add(cell_model);
    }
    this.set('cells', cell_collection);
    link_collection = new metabook.models.LinkCollection();
    ref1 = json_graph.links;
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      link_model = ref1[j];
      link_collection.add(link_model);
    }
    this.set('links', link_collection);
    this.set('tabs', json_graph.tabs);
    this.set('results', json_graph.results);
    return this.set('id', json_graph.id);
  };

  MetabookModel.prototype.custom_events = {
    'save': function(caller, ev) {
      var call_type, data;
      data = JSON.stringify(this.attributes);
      call_type = metabook.util.get_parameter('new') ? 'POST' : 'PUT';
      return $.ajax({
        url: metabook.uri.file.endpoint + metabook.uri.file.path,
        type: call_type,
        data: data,
        success: _.bind((function(json_data, status, xhr) {
          console.log('Succesfully uploaded data');
          if (json_data.new_path) {
            history.replaceState(null, null, "/" + json_data.new_path);
            metabook.uri.file.path = json_data.new_path;
            return metabook.uri.file.name = json_data.new_name;
          }
        }), this),
        error: error_graph
      });
    },
    'solve': function(caller, ev) {
      return this.session.solve_all(this, ev);
    }
  };

  data = {
    get_cells: _.partial(metabook.data.get_cells, MetabookModel),
    get_links: _.partial(metabook.data.get_links, MetabookModel)
  };

  return MetabookModel;

})(Backbone.Model);

metabook.views.MenuView = (function(superClass) {
  extend(MenuView, superClass);

  function MenuView() {
    return MenuView.__super__.constructor.apply(this, arguments);
  }

  MenuView.prototype.events = {
    "click [data-action]": function(ev) {
      var custom_event;
      custom_event = ev.target.dataset.action;
      Backbone.trigger(custom_event, this.model, ev);
      return console.log("MenuView event triggered");
    }
  };

  return MenuView;

})(Backbone.View);

//# sourceMappingURL=metabook.js.map
