// Generated by CoffeeScript 1.10.0
joint.shapes.html.Node = joint.shapes.basic.Generic.extend(_.extend({}, joint.shapes.basic.PortsModelInterface, {
  markup: '<g class="rotatable"><g class="scalable"><rect class="body"/></g><text class="label"/><g class="inPorts"/><g class="outPorts"/></g>',
  portMarkup: '<g class="port port<%= id %>"><circle class="port-body"/></g>',
  defaults: joint.util.deepSupplement({
    type: 'html.Node',
    size: {
      width: 1,
      height: 1
    },
    inPorts: [],
    outPorts: [],
    attrs: {
      rect: {
        stroke: 'none',
        'fill-opacity': 0
      },
      '.': {
        magnet: false
      },
      '.body': {
        width: 150,
        height: 250,
        stroke: '#000000'
      },
      '.port-body': {
        r: 10,
        magnet: true,
        stroke: '#000000'
      },
      text: {
        'pointer-events': 'none'
      },
      '.label': {
        text: 'Model',
        'ref-x': .5,
        'ref-y': 10,
        ref: '.body',
        'text-anchor': 'middle',
        fill: '#000000'
      },
      '.inPorts .port-label': {
        x: -15,
        dy: 4,
        'text-anchor': 'end',
        fill: '#000000'
      },
      '.outPorts .port-label': {
        x: 15,
        dy: 4,
        fill: '#000000'
      },
      '.inPorts .port-body': {
        fill: '#333333'
      },
      '.outPorts .port-body': {
        fill: '#666666'
      }
    }
  }, joint.shapes.basic.Generic.prototype.defaults),
  getPortAttrs: function(portName, index, total, selector, type) {
    var attrs, portBodySelector, portClass, portLabelSelector, portSelector;
    attrs = {};
    portClass = 'port' + index;
    portSelector = selector + '>.' + portClass;
    portLabelSelector = portSelector + '>.port-label';
    portBodySelector = portSelector + '>.port-body';
    attrs[portLabelSelector] = {
      text: portName
    };
    attrs[portBodySelector] = {
      port: {
        id: portName || _.uniqueId(type),
        type: type
      }
    };
    attrs[portSelector] = {
      ref: '.body',
      'ref-y': (index + 0.5) * (1 / total)
    };
    if (selector === '.outPorts') {
      attrs[portSelector]['ref-dx'] = 0;
    }
    return attrs;
  }
}));

joint.shapes.html.Atomic = joint.shapes.html.Node.extend({
  defaults: joint.util.deepSupplement({
    type: 'html.Atomic',
    size: {
      width: 80,
      height: 80
    },
    attrs: {
      '.body': {
        fill: 'salmon'
      },
      '.label': {
        text: 'Atomic'
      },
      '.inPorts .port-body': {
        fill: '#333333'
      },
      '.outPorts .port-body': {
        fill: '#666666'
      }
    }
  }, joint.shapes.html.Node.prototype.defaults)
});

joint.shapes.html.NodeView = joint.dia.ElementView.extend(_.extend({}, joint.shapes.basic.PortsViewInterface, {
  template: ['<div style="position:absolute">', '<table class="ui very compact table">', '<thead><tr><th colspan="3" class="node_heading"></th></tr></thead>', '<tr><td><label class="ui small label">x</label></td>', '<td><label class="ui label"></label></td>', '<td><span></span></td></tr>', '<tr><td>InPort</td>', '<td style="width:70%"><input type="text" value="I\'m HTML input" /></td>', '<td>OutPort</td></tr>', '<tfoot><tr><th colspan="3" class="node_footing"></th></tr></tfoot>', '</table>', '</div>'].join(''),
  initialize: function() {
    joint.dia.ElementView.prototype.initialize.apply(this, arguments);
    this.isdraggable = false;
    this.dragpoint = {
      x: 0,
      y: 0,
      paper_x: 0,
      paper_y: 0,
      client_x: 0,
      client_y: 0,
      offset_x: 0,
      offset_y: 0
    };
    alert(this.model);
    this.$box = $(_.template(this.template)());
    this.$box.find('label').on('mousedown', _.bind((function(evt) {
      var point, point2;
      evt = evt.originalEvent;
      if (evt.which !== 1) {
        return;
      }
      this.dragpoint.x = evt.pageX;
      this.dragpoint.y = evt.pageY;
      point = this.paper.svg.createSVGPoint().matrixTransform(this.paper.viewport.getCTM().inverse());
      this.dragpoint.offset_x = point.x * V(this.paper.viewport).scale().sx;
      this.dragpoint.offset_y = point.y * V(this.paper.viewport).scale().sy;
      point2 = this.paper.offsetToLocalPoint(this.dragpoint.x, this.dragpoint.y);
      this.dragpoint.paper_x = point2.x;
      this.dragpoint.paper_y = point2.y;
      this.dragpoint.client_x = this.model.get('position').x;
      this.dragpoint.client_y = this.model.get('position').y;
      return this.isdraggable = true;
    }), this));
    $(window).on('mousemove', _.bind((function(evt) {
      var point;
      if (this.isdraggable) {
        if (evt.buttons !== 1) {
          this.isdraggable = false;
          return;
        }
        evt = evt.originalEvent;
        point = this.paper.offsetToLocalPoint(evt.pageX, evt.pageY);
        return this.model.set('position', {
          x: this.dragpoint.client_x - this.dragpoint.paper_x + point.x,
          y: this.dragpoint.client_y - this.dragpoint.paper_y + point.y
        });
      }

      /*
      evt = evt.originalEvent
      return if evt.which != 1
      @dragpoint.x = evt.pageX
      @dragpoint.y = evt.pageY
      point = Obj.mainpaper.svg.createSVGPoint().matrixTransform(Obj.mainpaper.viewport.getCTM().inverse())
      @dragpoint.offset_x = point.x * V(paper.viewport).scale().sx
      @dragpoint.offset_y = point.y * V(paper.viewport).scale().sy
      @paper_isdraggable = true
      #@model.set 'position', { x: 370, y: 300}
       */
    }), this));
    $(window).on('mouseup', _.bind((function(e) {
      return this.isdraggable = false;
    }), this));
    this.$box.find('input,select').on('mousedown click', function(evt) {
      return evt.stopPropagation();
    });
    this.$box.find('input').on('change', _.bind((function(evt) {
      this.model.set('input', $(evt.target).val());
    }), this));
    this.$box.find('select').on('change', _.bind((function(evt) {
      return this.model.set('select', $(evt.target).val());
    }), this));
    this.$box.find('select').val(this.model.get('select'));
    this.$box.find('.delete').on('click', _.bind(this.model.remove, this.model));
    this.model.on('change', this.updateBox, this);
    this.model.on('remove', this.removeBox, this);
    return custom_shapes.push(this);
  },
  render: function() {
    joint.dia.ElementView.prototype.render.apply(this, arguments);
    this.paper.$el.prepend(this.$box);
    this.updateBox();
    return this;
  },

  /*    update: ->
  
          #// First render ports so that `attrs` can be applied to those newly created DOM elements
          #// in `ElementView.prototype.update()`.
          this.renderPorts()
          joint.dia.ElementView.prototype.update.apply(this, arguments)
  
      renderPorts: ->
  
          $inPorts = @$('.inPorts').empty()
          $outPorts = @$('.outPorts').empty()
  
          portTemplate = _.template(@model.portMarkup)
  
          _.each(_.filter(@model.ports, (p) -> return p.type is 'in'), (port, index) ->
              $inPorts.append(V(portTemplate({ id: index, port: port })).node)
          )
          _.each(_.filter(@model.ports, (p) -> return p.type is 'out'), (port, index) ->
              $outPorts.append(V(portTemplate({ id: index, port: port })).node);
          )
   */
  updateBox: function() {
    var bbox, ref, scale, x, y;
    bbox = this.model.getBBox();
    ref = this.paper.getRealCoords(bbox.x, bbox.y), x = ref.x, y = ref.y;
    bbox.x = x;
    bbox.y = y;
    scale = this.paper.current_scale;
    $(Settings.id.messages).text(bbox.x + "//" + bbox.y);
    this.$box.find('label').text(this.model.get('label'));
    this.$box.find('span').text(this.model.get('select'));
    this.$box.css('transform-origin', 'left top');
    return this.$box.css({
      width: bbox.width,
      height: bbox.height,
      left: bbox.x,
      top: bbox.y,
      transform: 'rotate(' + (this.model.get('angle') || 0) + 'deg) scale(' + scale + ')'
    });
  },
  removeBox: function(evt) {
    return this.$box.remove();
  }
}));

joint.shapes.html.Link = joint.dia.Link.extend({
  defaults: {
    type: 'html.Link',
    attrs: {
      '.connection': {
        'stroke-width': 2
      }
    }
  }
});

//# sourceMappingURL=node.js.map
